name: Flask Blog Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  zap-dast-scan:
    runs-on: ubuntu-latest

    steps:
      # -------------------------------
      # Checkout repo
      # -------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # -------------------------------
      # Set up Python
      # -------------------------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # -------------------------------
      # Install dependencies and setup
      # -------------------------------
      - name: Install Python dependencies
        run: pip install -r requirements.txt gunicorn

      # -------------------------------
      # Initialize database
      # -------------------------------
      - name: Initialize database
        run: python init_db.py

      # -------------------------------
      # Start Flask app using Gunicorn
      # -------------------------------
      - name: Start Flask blog
        run: |
          gunicorn -w 2 -b 0.0.0.0:8080 app:app &
          # wait until server is up and responding
          for i in {1..30}; do
            if curl -f http://localhost:8080/ > /dev/null 2>&1; then
              echo "Flask started and responding"
              break
            fi
            echo "Waiting for Flask to start... ($i/30)"
            sleep 2
          done
          # Test the endpoint
          curl -I http://localhost:8080/ || echo "Warning: App may not be fully ready"

      # -------------------------------
      # Prepare ZAP workspace
      # -------------------------------
      # - name: Prepare ZAP working folder
      #   run: mkdir -p /zap/wrk
      

      # -------------------------------
      # Run OWASP ZAP Baseline Scan
      # -------------------------------
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.11.0
        continue-on-error: true
        with:
          target: 'http://localhost:8080/'
          cmd_options: "-a"
          fail_action: false
          allow_issue_writing: false
        env:
          GITHUB_TOKEN: ''
          

      # -------------------------------
      # Prepare report folder for GitHub Pages
      # -------------------------------
      - name: Prepare report for GitHub Pages
        if: always()
        run: |
          mkdir -p zap_report
          # Check if ZAP generated any reports
          if [ -f "report_html.html" ]; then
            mv report_html.html zap_report/index.html
            echo "ZAP HTML report found and moved"
          else
            echo "<h1>ZAP Scan Report</h1><p>No report generated or scan failed.</p>" > zap_report/index.html
            echo "Created placeholder report"
          fi
          # List contents for debugging
          echo "Contents of zap_report directory:"
          ls -la zap_report/

      # -------------------------------
      # Deploy HTML report to GitHub Pages
      # -------------------------------
      - name: Deploy ZAP HTML report to GitHub Pages
        id: publish
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./zap_report
          publish_branch: gh-pages
          force_orphan: true
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "Deploy ZAP security scan report"

      # -------------------------------
      # Set ZAP report URL as job output
      # -------------------------------
      - name: Set ZAP report URL output
        id: set-url
        if: always()
        run: |
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
          REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
          REPORT_URL="https://${REPO_OWNER}.github.io/${REPO_NAME}/"
          echo "zap_report_url=${REPORT_URL}" >> $GITHUB_OUTPUT
          echo "ðŸ“Š ZAP Security Report will be available at: ${REPORT_URL}"
          echo "ðŸ”§ Note: It may take a few minutes for GitHub Pages to update after deployment"
